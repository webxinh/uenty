<?php
namespace Codeception\Lib\Connector\Laravel5;

use Exception;
use Illuminate\Contracts\Debug\ExceptionHandler as ExceptionHandlerContract;


class ExceptionHandlerDecorator implements ExceptionHandlerContract
{
    
    private $laravelExceptionHandler;

    
    private $exceptionHandlingDisabled = true;

    
    public function __construct($laravelExceptionHandler)
    {
        $this->laravelExceptionHandler = $laravelExceptionHandler;
    }

    
    public function exceptionHandlingDisabled($exceptionHandlingDisabled)
    {
        $this->exceptionHandlingDisabled = $exceptionHandlingDisabled;
    }

    
    public function report(Exception $e)
    {
        $this->laravelExceptionHandler->report($e);
    }

    
    public function render($request, Exception $e)
    {
        $response = $this->laravelExceptionHandler->render($request, $e);

        if ($this->exceptionHandlingDisabled &&
            strpos($response->getContent(), '<div id="sf-resetcontent" class="sf-reset">') !== false
        ) {
            // If content was generated by the \Symfony\Component\Debug\ExceptionHandler class
            // the Laravel application could not handle the exception,
            // so re-throw this exception if the Codeception user disabled Laravel's exception handling.
            throw $e;
        }

        return $response;
    }

    
    public function renderForConsole($output, Exception $e)
    {
        $this->laravelExceptionHandler->renderForConsole($output, $e);
    }

    
    public function __call($method, $args)
    {
        return call_user_func_array(array($this->laravelExceptionHandler, $method), $args);
    }
}
